<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>start       = true;
started     = false;
type        = network_socket_tcp;
buff        = buffer_create(1024,buffer_grow,1);
server_id   = irandom(999999)+current_time-irandom(500);
max_clients = 16;
port        = 6510;
server      = -1;

queue[gamemode.assault] = ds_queue_create();
queue[gamemode.defense] = ds_queue_create();
queue[gamemode.team]    = ds_queue_create();

client[data.ip]         = ds_list_create();
client[data.port]       = ds_list_create();
client[data.gamemode]   = ds_list_create();
client[data.username]   = ds_list_create();
client[data.id]         = ds_list_create();
client[data.ingame]     = ds_list_create();
client[data.searching]  = ds_list_create();
client[data.socket]     = ds_list_create();
client[data.connected]  = ds_list_create();

alarm[0] = room_speed*0.5;



enum data
{
    ip,
    port,
    gamemode,
    username,
    id,
    ingame,
    searching,
    socket,
    connected
}

enum gamemode
{
    assault,
    defense,
    team
}

enum command
{
    login,
    register,
    connect
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///List to Queue
for(var i = 0; i &lt; ds_list_size(client[data.id]); i++)
{
    var cid = ds_list_find_value(client[data.id],i);
    var gm  = ds_list_find_value(client[data.gamemode],i);
    var tp  = ds_list_find_value(client[data.ingame],i);
    var sr  = ds_list_find_value(client[data.searching],i);
    if cid &gt;= 0 and gm &gt;= 0 and !tp and sr
    {
        var list = ds_list_create();
        while(ds_queue_size(gm) &gt; 0)
        {
            ds_list_add(list,ds_queue_dequeue(gm));
        }
        var doit = false;
        if ds_list_find_index(list,cid) == -1 doit = true;
        while(ds_list_size(list) &gt; 0)
        {
            ds_queue_enqueue(gm,list[| 0]);
            ds_list_delete(list,0);
        }
        if doit ds_queue_enqueue(gm,cid);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset Alarm
alarm[0] = room_speed*0.5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start
if start and !started
{
    start = false;
    server = network_create_server(type,port,max_clients);
    if server &lt; 0
    {
        server = -1;
    }
    else started = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ds_queue_size(queue[gamemode.assault]) &gt; 2
{
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var tp      = async_load[? "type"];
var eventid = async_load[? "id"];

if eventid == server
{
    switch(tp)
    {
        /*case network_type_non_blocking_connect:
            
            break;*/
        case network_type_non_blocking_connect:
        case network_type_connect:
            ds_list_add(client[data.ip],async_load[? "ip"]);
            ds_list_add(client[data.port],async_load[? "port"]);
            ds_list_add(client[data.gamemode],gamemode.assault);
            ds_list_add(client[data.username],"Player");
            ds_list_add(client[data.id],-1);
            ds_list_add(client[data.ingame],false);
            ds_list_add(client[data.searching],false);
            ds_list_add(client[data.socket],async_load[? "socket"]);
            ds_list_add(client[data.connected],false);
            break;
        case network_type_disconnect:
            var pos = ds_list_find_index(client[data.ip],async_load[? "ip"]);
            if pos &gt;= 0
            {
                ds_list_delete(client[data.ip],pos);
                ds_list_delete(client[data.port],pos);
                ds_list_delete(client[data.gamemode],pos);
                ds_list_delete(client[data.username],pos);
                ds_list_delete(client[data.id],pos);
                ds_list_delete(client[data.ingame],pos);
                ds_list_delete(client[data.searching],pos);
                ds_list_delete(client[data.socket],pos);
                ds_list_delete(client[data.connected],pos);
            }
            break;
    }
}
else if tp == network_type_data
{
    server_handle();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_white);
draw_set_font(ft_list);
for(var i = 0; i &lt; ds_list_size(client[data.id]); i++)
{
    draw_text(4,4+i*(string_height(" ")+2),string(ds_list_find_value(client[data.username],i))+
        " - "+ds_list_find_value(client[data.ip],i)+":"+string(ds_list_find_value(client[data.port],i)));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
